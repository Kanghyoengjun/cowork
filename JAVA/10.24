백앤드개발자 -> mvc
-throws
  예외를 발생시킨 실행문의 상위 코드 블록에게 exception 떠넘기기
  떠넘겨진 예외 객체는 적절한 예외 핸들러를 만나 처리될 때까지 계속 메소드 호출 역순으로 전달
  main() 까지 떠넘겨도 적절한 예외 핸들러를 찾지 못하면 JVM은 해당 프로그램을 종료 시킴
  
throws 를 실제로 사용하나??
단독으로는 잘 안쓰고 상속에서 자주쓴다.

--4장
-클래스와 객체
객체지향 언어의 가장 큰 장점 -> 코드의 재사용성이 뛰어나다

*실세계 객체의 특징 
  객체마다 고유한 특성(속성)과 행동을 가짐
  객체들끼리 메시지를 주고받으며 서로 상호작용을 한다.
  
*이 언어가 객체지향 언어다
  캡슐화
  상속
  다형성
자바는 뼛속까지 객체지향 언어임, C++은 자바정도는 아니다.   객체지향 언어에서 상속은 너무너무 중요함.
-캡슐화 : 객체를 캡슐로 싸서 내부를 볼 수 없게 하는 것 -> 외부의 접근으로부터 객체를 보호   = 객체의 가장 본질적인 특징
          public, private...
          클래스: 객체 모양을 선언한 틀(캡슐화하는 틀) -> 클래스 내에 메소드(함수)와 필드(멤버변수) 구현
          객체: 생성된 실체(instance)
	  
-상속 : 상위 개체의 속성이 하위 개체에 물려짐. 하위 개체가 상위 개체의 속성을 모두 가지는 관계
	 상위 클래스의 멤버를 하위 클래스가 물려받음 super class, sub class	extends
	 
-다형성 : 같은 이름의 메소드가 클래스 혹은 객체에 따라 다르게 구현되는 것	(polymorphism)
	  메소드 오버로딩: 한 클래스 내에서 이름은 같으나 행동이 다른 것
	  메소드 오버라이딩: 상속관계에서 부모가 정의한 메소드를 자식들이 재정의 한 것

*객체 지향 언어의 목적
  -소프트웨어의 생산성 향상
  -실세계에 대한 쉬운 모델링
  
절차 지향 프로그래밍: 작업 순서를 표현하는 컴퓨터 명령 집합, 함수들의 집합으로 프로그램 작성
객체 지향 프로그래밍: 컴퓨터가 수행하는 작업을 객체들간의 상호 작용으로 표현, 클래스 혹은 객체들의 집합으로 프로그램 작성

*****************************
--클래스
	클래스는 객체의 타입이다.
	속성 -> 멤버 변수(필드),   행동 -> 멤버 메소드(함수) 구현
--객체
        클래스의 실체
        메모리 공간을 갖는 구체적인 실체
        인스턴스(instance)라고도 부름
*****************************

--클래스,객체의 생성과 활용
  레퍼런스 변수 선언: 객체를 가리킬 레퍼런스 변수 선언 -> Circle pizza;
  객체 생성        : new 연산자 이용, 메모리를 할당 받아 메모리에 대한 레퍼런스(주소)를 리턴함 -> pizza = new Circle();
  객체 멤버 접근    : 점(.) 연산자 이용 -> pizza.radius = 10;   area = pizza.getArea();
  


객체지향을 맛보고 싶다면 mfc를 해라 -> 취업이 잘됨 -> C#도 잘됨
---------------------------------------------------------------------------------------
--1교시 throws exception--
import java.util.Scanner;
public class DevideByZero {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int dividend;
		int divisor;
		
		System.out.print("나누어지는 수:");
		dividend = sc.nextInt();
		System.out.print("나눌 수:");
		divisor = sc.nextInt();
		
		//throws를 사용하면 try catch를 메인에다 구현
		try {
			divide(dividend, divisor);						
		}
		catch(ArithmeticException e){
			System.out.println("0으로 나눌 수 없음.");
		}
	}

	static void divide(int dividend, int divisor) throws ArithmeticException{
		System.out.println(dividend + "을(를) " + divisor + "로 나눈 몫:" + dividend/divisor);						
	}
}

--3교시 Circle class--
public class Circle {
	int radius;
	String name;
	
	public double getArea() {
		return 3.14*radius*radius;
	}	
	public static void main(String[] args) {
		Circle pizza = new Circle();
		pizza.radius = 10;
		pizza.name = "피자";
		double area = pizza.getArea();
		System.out.println(pizza.name + "의 면적은 " + area);
		
		Circle donut = new Circle();
		donut.radius = 2;
		donut.name = "도넛";
		area = donut.getArea();
		System.out.println(donut.name + "의 면적은 " + area);	
	}
}

--3교시 Rectangle--
import java.util.Scanner;

class Rectangle{
	int width;
	int height;
	
	public int getArea() {
		return width*height;
	}
}

public class RectApp {
	public static void main(String[] args) {
		Rectangle rt = new Rectangle();
		Scanner sc = new Scanner(System.in);
		System.out.print("사각형의 가로,세로 >>");
		rt.width = sc.nextInt();
		rt.height = sc.nextInt();
		int area = rt.getArea();
		System.out.println("사각형의 면적은 " + rt.getArea());
		sc.close();
	}
}

------------------------------------------------------------------------------------------
---중간
객관식 7문제, 단답형 30문제정도, 서술형 플랫폼의 독립성 -> jvm(자바가상머신),바이트코드
---------------------------------------------------
과제, 시험 다음주까지 (11월 6일 일요일 밤 11시 50분)
3장 실습문제
121p Open Challenge
125p~ 1,2,3,5,6,8,보너스 1
*2장이 쉬웠다고 만만하게 보지 말것
