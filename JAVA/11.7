---가비지컬렉션
가비지 : 가리키는 레퍼런스가 하나도 없는 객체 -> 더이상 접근할 수 없어 사용할 수 없게 된 메모리
가비지컬렉션 : 자바가상머신이 자동으로 가비지를 수집,반환 -> 가용 메모리 공간이 일정 이하로 부족해질 때
              가비지컬렉터에 의해 자동으로 수행
코딩하면서 가비지가 안생길수는 없다. 쓸데없는 가비지를 만들지말자. 


가비지는 몇개인가? 책문제(166p~)

int[] n=new int[10];
		//가비지는 몇개?                  10개
		for(int i=0; i<10; i++)
		{
			Scanner s = new Scanner(System.in);
			n[i] = s.nextInt();
		}
		
		//가비지는 몇개?                  9개
		Scanner sc = null;
		for(int i=0; i<10; i++)
		{
			Scanner s = new Scanner(System.in);
			n[i] = s.nextInt();
		}
		
		//가비지를 발생시키지 말자(좋은코드)
		Scanner s = new Scanner(System.in);
		for(int i=0; i<10; i++)
		{
			n[i] = s.nextInt();
		}
    

---패키지
패키지 : 상호 관련 있는 클래스 파일(컴파일된 .class)을 저장하여 관리하는 디렉터리
        자바 응용프로그램은 하나 이상의 패키지로 구성

---접근 지정자
private, protected, public, default(생략)
접근 지정자의 목적 : 클래스나 일부 멤버를 공개하여 다른 클래스에서 접근하도록 허용
                    객체 지향 언어의 캡슐화 정책은 멤버를 보호하는 것
대부분 public을 많이 쓴다.      private은 이너클래스를 사용할때 가끔 쓴다.


멤버 변수는 디폴트 값이 있어서 초기화 하지 않고 사용가능하다.
지역 변수는 초기화 하지 않고 사용하려하면 에러.

---static
static 멤버는 클래스당 하나만 생성
객체들에 의해 공유됨, 클래스 멤버라고 부름
static은 클래스가 로딩될 때 한번만 메모리 생성(객체가 생기기 전),   non static 은 객체가 생성될 때마다 메모리 생성
static = 클래스 멤버     non static = 인스턴스 멤버
프로그램이 시작되자마자 클래스가 로딩됨 -> static 멤버 메모리 생성 -> 프로그램이 종료될 때 사라짐
*static의 활용 : 전역함수, 전역변수를 만들 때 -> 모든 클래스에서 공유가능한 전역 변수,함수 를 만들고자 할 때 사용함
                 공유 멤버를 만들고자 할 때
static멤버는 클래스 이름으로 접근가능 (non static은 불가능)
class A
A.m = 3;
A.f();
객체의 멤버로도 접근가능
static함수에서 non static 멤버 호출 불가능 -> static멤버는 객체를 생성하지 않아도 사용할 수 있기 때문에 에러가 남.
static은 this 사용불가 -> 위와 같은 이유

---final
public static final 로 선언
final은 상속불가능
-----------------------------------------------------
과제 4장실습 184p~
1,2,3,5,6,B1,Open Challenge(179p)
