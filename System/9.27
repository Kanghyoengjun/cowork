--------지금까지 배운것 중 중요하다고 생각하는 10가지
1.모델링: 복잡한 현실세계를 이해하기 쉽도록 단순화하는 작업, 모델을 만드는 모든 작업(추상화)
2.클래스: 여러 함수들을 정의해놓음으로서 객체를 만들 때 사용한다.
3.UML: 팀 내 프로젝트 등을 할 때 사용하는 통합 모델링 언어, 그래픽 형태로 작성하며 필요한 모델을 정확하고 완전하게 명세화 할 수 있다. 또, 다양한 프로그래밍언어로 표현할 수 있다.
4.메소드: C언어에서의 함수를 메소드라고한다.
5.캡슐화: 관련된 데이터(변수,상태)와 메소드(함수,행위)를 하나의 클래스 속에 포함시키는 메커니즘으로 이해, 관리가 용이하다.
6.정보은닉: 외부에 어떤 서비스를 제공할 수 있는지만 명시하고 어떻게 구현되었는지는 제공하지않는 것을 말하며,객체에대한 추상화, 모듈의 독립성,유지보수성,확장성을 높여준다.
7.객체: 현실에 존재하는 모든 것을 말하며, 프로그래밍언어에서 객체는 관련된 데이터와 기능의 묶음을 말한다.
8.메시지: 객체 사이의 상호작용 수단, 구성이다. 수신객체.함수이름(매개변수) 이런 형식으로 사용한다.
9.생성자: 객체를 생성할 때 생성된다. 따로 정의를 하지 않아도 기본생성자와 소멸자가 생성되며, 매개변수를 다르게하여 클래스에 정의를 해놓을 수 있다.
10.객체지향 설계: 클래스들 간의 관계(구조)를 정의한 정적설계와  기능(함수)의 흐름을 정의한 동적 설계로 나뉜다.

---빙고 키워드
public interface,sequence diagram,class diagram,모듈,정적설계,동적설계,추상화,객체지향

클래스가 객체보다 먼저임.

-----------------------------------------------------------------------------------------------------------------
-복합객체(Composite Object)-
super object, part object, sub object
클래스안의 클래스 = Inner class

포함(Aggregation) 발생경우 -> 클래스 내부정의에서, 클래스 내의 객체 생성함수 내에서, 부분 객체를 실제 사용하기 직전
1.Class A 안에서 B myb
2.Class A 안의 public A() 안에서 B myb = new B()
3.Class A 안에서 B myb, public f1(){ B myb = new B()

메인보드와 그래픽카드 = Composition
Aggregation
교수와 학생 = Association -> 결합관계가 약함
Dependency -> 결합관계가 가장 약함.

Class = object type - 객체를 만드는 틀
함수 오버로딩(function overloading) - 같은 이름의 함수를 매개변수의 타입이나 개수를 다르게 하여 중복정의 하는것

Point,Rectangle,Controller 클래스 생성
// Point Class
package Test;
public class Point {
	int x;
	int y;
	public Point(int x,int y) {
		this.x = x;
		this.y = y;
	}
}
// Rectangle Class
public class Rectangle {
	int width;
	int height;
	Point p;
	public Rectangle() {
		p = new Point(0,0);
	}
	public Rectangle(Point p) {
		this.p=p;
	}
	public Rectangle(int w,int h) {
		this(new Point(0,0),w,h); //밑에있는 얘 호출	
	}
	public Rectangle(Point p,int w,int h) {
		this.p = p;
		width = w;
		height = h;
	}
	public void move(int x, int y) {
		p.x=x;
		p.y=y;
	}
	public int area() {return width*height;}
}
// Controller Class
public class Controller {
	public static void main(String[] args) {
		Point p1= new Point(23,94);
		Rectangle r1= new Rectangle(p1,30,40);
		
		System.out.println("r1의 폭 = " + r1.width);
		System.out.println("r1의 높이 = " + r1.height);
		System.out.println("r1의 면적 = " + r1.area());
		System.out.println("r1의 x좌표 = " + r1.p.x);
		System.out.println("r1의 y좌표 = " + r1.p.y);
	}
}

private 은 get,set을 만들어야함
// private Point Class
public int getX() {return x;}
public int getY() {return y;}
public void setX(int x) {this.x=x;}
public void setY(int y) {this.y=y;}

// private Rectangle Class
public int getWidth() {return width;}
public int getHeight() {return height;}
public void move(int x, int y) {
	p.setX(x);
	p.setY(y);
}

// private Controller Class
System.out.println("r1의 폭 = " + r1.getWidth());
System.out.println("r1의 높이 = " + r1.getHeight());
System.out.println("r1의 면적 = " + r1.area());
System.out.println("r1의 x좌표 = " + r1.p.getX());
System.out.println("r1의 y좌표 = " + r1.p.getY());

// private Circle Class
public class Circle {
	private int r;
	private int x;
	private int y;
	Point p2;
	public Circle() {
		
	}
	public Circle(Point p2,int r) {
		this.p2=p2;
		this.r=r;
	}
	public Circle(Point p2,int r,int x,int y) {
		this.p2=p2;
		this.r=r;
		this.x=x;
		this.y=y;
	}
	public int getR() {return r;}
	public double circum() {return r*2*3.14f;}
	public double area() {return r*r*3.14f;}
}
