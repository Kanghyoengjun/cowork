**컬렉션 - 크기가 자동 조절되는 컨테이너, 요소의 삽입,삭제에 따른 요소의 위치가 자동 이동
*제네릭 - 특정 타입만 다루지 않고, 여러 종류의 타입으로 사용할 수 있도록 클래스나 메소드를 일반화시키는 것
          클래스나 인터페이스 이름에 <E>, <K>, <V> 등 타입매개변수 포함
          


*벡터 - 배열을 가변 크기로 다룰 수 있게하고, 객체의 삽입,삭제,이동이 쉬운 컬렉션(컨테이너) 클래스
java.util.Vector
Vector<E>
Vector<Integer>, Vector<String>      사용가능
<>에는 객체만 가능 -> int,char,double 등의 기본 타입은 사용불가
Vector<int> v = new Vector<int>()          <- 사용불가
Vector<Integer> v = new Vector<Integer>()  <- 사용가능

Vector<Integer> v = new Vector<Integer>(5) 벡터의 초기용량 설정

add(int) 요소 삽입
get(i)   요소 검색

*Vector<E> 주요 메소드
-------------------------------------------------------------------------
boolean add(E element) - 벡터의 맨 뒤에 element 추가
void add(int index, E element) - 인덱스 index에 element 삽입
E elementAt(int index) - 인덱스 index의 요소 리턴
E get(int index) - 인덱스 index의 요소 리턴 , elementAt와 완전히 똑같은 기능
E remove(int index) - 인덱스 index의 요소삭제
int size() - 벡터가 포함하는 요소의 개수 리턴    (capacity = 용량)
-------------------------------------------------------------------------
int lastElement() - 마지막 요소 리턴
E removeAllElements() - 모든 요소 삭제

Vector<Integer> v = new Vector<Integer>() - Java 7 이전
Vector<Integer> v = new Vector<>() - Java 7 이후부터 가능
var v = new Vector<Integer>() - Java 10 이후부터 가능



import java.util.Vector;
class Point{
	private int x, y;
	public Point(int x,int y) {
		this.x=x;
		this.y=y;
	}
	
	public String toString() {
		return "(" + x + "," + y + ")"; 
	}
}

public class VectorEx {

	public static void main(String[] args) {
		Vector<Integer> v = new Vector<Integer>();
		v.add(5);
		v.add(123);
		v.add(-2382194);
		v.add(1,814912985);	
		System.out.println(v);
		System.out.println("요소개수:" + v.size());
		System.out.println("용량:" + v.capacity());
		for(int i=0; i<v.size(); i++) {
			int n = v.get(i);
			System.out.println(n);
		}
		
		Vector<String> vs = new Vector<>();
		vs.add("Hello");
		vs.add("How are you");
		vs.add("Fine");		
		for(int j=0; j<vs.size(); j++) {
			String s = vs.get(j);
			System.out.println(s);
		}
		for(String q : vs) {			//for each
			System.out.println(q);
		}
		System.out.println(vs);
		
		Vector<Point> vp = new Vector<>();
		vp.add(new Point(2,3));
		vp.add(new Point(-5,20));
		vp.add(new Point(30,-12));
		vp.remove(1);
		for(int k=0; k<vp.size(); k++) {
			Point p = vp.get(k);
			System.out.println(p);
		}
	}
}



*ArrayList<E>
ArrayList<String> al = new ArrayList<>();

벡터와 거의 동일하다.
차이점 - 벡터와 달리 스레드 동기화 기능이 없음
  ㄴ 벡터 - 하나의 스레드가 벡터에 접근할때 다른 스레드는 접근을 못함 -> 안전하다.  대신 속도가 느림
     어레이리스트 - 동시에 접근이 가능함 -> 자료의 유실이 발생할 수 있어서 위험하다. 대신 속도가 빠름

capacity() 메소드 없음.

벡터,어레이리스트는 배열의 길이를 모를 때(루프를 몇번해야할지 모를때) 빛을 발함

import java.util.Scanner;
import java.util.ArrayList;
public class ArrayEx {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		ArrayList<String> al = new ArrayList<>();
		
		while(true) {
			System.out.print("이름을 입력하세요.");
			String s= sc.next();
			if(s.equals("exit"))
				break;
			al.add(s);	
		}
		
		for(int i=0; i<al.size(); i++) {
			String a = al.get(i);
			System.out.println(a);
		}
		
		String longest = al.get(0);			//가장 긴 이름 출력해보자
		for(int i=0; i<al.size(); i++) {
			String n = al.get(i);
			if(longest.length() < n.length())
				longest = n;
		}
		System.out.println("길어->" + longest);
	}
}


*Iterator<E> - 리스트 구조의 컬렉션에서 순차검색을 위한 인터페이스
벡터나 어레이리스트랑은 거의 안씀 -> 인덱스가 있기때문에
Set(집합) 이랑 자주씀 -> Set은 순서가 없기 때문
HashMap 이랑도 자주쓴다

boolean hasNext() - 요소가 남아있다면 true 리턴
E next() - 다음 요소 리턴
void remove() - 마지막으로 리턴된 요소 제거


*HashMap<K,V> - 키와 값의 쌍으로 구성되는 요소를 다루는 컬렉션
값을 검색하기 위해서는 반드시 키 이용

해시 함수 - 삽입되는 순서와 해시맵에 들어있는 위치는 관계없다
해시맵은 요소의 삽입,삭제시간이 매우 빠르다 -> 요소들의 위치 이동이 필요없기 때문
검색이 매우 빠르다 -> get(key) 메소드가 호출되면 해시함수가 key가 저장된 위치를 바로 찾아냄
단점: 인덱스로 요소에 접근할 수 없고, 오직 키로만 검색해야한다

삽입 = put(key,value)
검색 = get(key)
Set<K> keySet() - HashMap에 있는 모든 키를 담은 Set<K> 컬렉션 리턴








