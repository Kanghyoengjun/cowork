
// 201904026_ballgameView.cpp: CMy201904026ballgameView 클래스의 구현
//

#include "pch.h"
#include "framework.h"
// SHARED_HANDLERS는 미리 보기, 축소판 그림 및 검색 필터 처리기를 구현하는 ATL 프로젝트에서 정의할 수 있으며
// 해당 프로젝트와 문서 코드를 공유하도록 해 줍니다.
#ifndef SHARED_HANDLERS
#include "201904026_ballgame.h"
#endif

#include "201904026_ballgameDoc.h"
#include "201904026_ballgameView.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#define BSIZE 12
#endif


// CMy201904026ballgameView

IMPLEMENT_DYNCREATE(CMy201904026ballgameView, CView)

BEGIN_MESSAGE_MAP(CMy201904026ballgameView, CView)
	ON_WM_KEYDOWN()
	ON_WM_TIMER()
	ON_WM_SIZE()
END_MESSAGE_MAP()

	

// CMy201904026ballgameView 생성/소멸

CMy201904026ballgameView::CMy201904026ballgameView() noexcept
	: m_Ball(0)
	, m_Board(NULL)
	, m_WinRight(0)
	, m_xStep(0)
	, m_yStep(0)
	, m_Where(0)
	, m_WinBottom(0)
	{
		//공의 초기좌표
		m_Ball = CPoint(100, 30);
		//보드 개수
		m_Board = new CBoard[8];
		//보드 만들기
		m_Board[0] = CBoard(100, 40, 100, 1, 6);
		m_Board[1] = CBoard(600, 240, 90, -1, 5);
		m_Board[2] = CBoard(300, 340, 80, 1, 3);
		m_Board[3] = CBoard(700, 440, 20, -1, 1);
		m_Board[4] = CBoard(400, 590, 150, 1, 10);
		m_Board[5] = CBoard(500, 640, 10, 1, 10);
		m_Board[6] = CBoard(1200, 300, 300, -1, 1);
		m_Board[7] = CBoard(1500, 500, 120, -1, 10);
	}


CMy201904026ballgameView::~CMy201904026ballgameView()
{
}

BOOL CMy201904026ballgameView::PreCreateWindow(CREATESTRUCT& cs)
{
	// TODO: CREATESTRUCT cs를 수정하여 여기에서
	//  Window 클래스 또는 스타일을 수정합니다.

	return CView::PreCreateWindow(cs);
}

// CMy201904026ballgameView 그리기

void CMy201904026ballgameView::OnDraw(CDC* pDC)
{
	CMy201904026ballgameDoc* pDoc = GetDocument();
	ASSERT_VALID(pDoc);
	if (!pDoc)
		return;

	// TODO: 여기에 원시 데이터에 대한 그리기 코드를 추가합니다.
	int i;
	// 공 그리기 + 색 추가
	int r, g, b;
	r = rand() % 256; g = rand() % 256; b = rand() % 256;
	CBrush bac, * bar;
	bac.CreateSolidBrush(RGB(r,g ,b ));
	bar = pDC->SelectObject(&bac);
	pDC->Ellipse(m_Ball.x - BSIZE, m_Ball.y - BSIZE, m_Ball.x + BSIZE, m_Ball.y + BSIZE);
	pDC->SelectObject(bar);
	bac.DeleteObject();
	// 보드 그리기 + 색 추가
	for (i = 0; i < 8; i++)
	{
		CBrush boc, * bor;
		boc.CreateSolidBrush(RGB(i+180, i*125, i*194));
		bor = pDC->SelectObject(&boc);
		pDC->Rectangle(m_Board[i].m_xPos - m_Board[i].m_size, m_Board[i].m_yPos - 1,
						m_Board[i].m_xPos + m_Board[i].m_size, m_Board[i].m_yPos + 10);
		pDC->SelectObject(bor);
		boc.DeleteObject();
	}
	// 골인지점 생성
	pDC->Rectangle(m_Goal);
}


// CMy201904026ballgameView 진단

#ifdef _DEBUG
void CMy201904026ballgameView::AssertValid() const
{
	CView::AssertValid();
}

void CMy201904026ballgameView::Dump(CDumpContext& dc) const
{
	CView::Dump(dc);
}

CMy201904026ballgameDoc* CMy201904026ballgameView::GetDocument() const // 디버그되지 않은 버전은 인라인으로 지정됩니다.
{
	ASSERT(m_pDocument->IsKindOf(RUNTIME_CLASS(CMy201904026ballgameDoc)));
	return (CMy201904026ballgameDoc*)m_pDocument;
}
#endif //_DEBUG


// CMy201904026ballgameView 메시지 처리기


void CMy201904026ballgameView::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	switch (nChar)
	{
	//엔터 키로 게임 스타트
	case VK_RETURN:
		m_xStep = m_Board[m_Where].m_speed * m_Board[m_Where].m_direction + 1;
		SetTimer(0, 5, NULL);
		break;
	// 왼쪽 이동, 낙하
	case VK_LEFT:
		if(m_Where >= 0 && m_Where <= 7)
		m_Ball.x = m_Ball.x - BSIZE;
		if (m_Ball.x < m_Board[m_Where].m_xPos - m_Board[m_Where].m_size)
		{
				m_xStep = 0;
				m_yStep = BSIZE-7;	
		}
		break;
	// 오른쪽 이동, 낙하
	case VK_RIGHT:
		if (m_Where >= 0 && m_Where <= 7)
		m_Ball.x = m_Ball.x + BSIZE;
		if (m_Ball.x > m_Board[m_Where].m_xPos + m_Board[m_Where].m_size)
		{
				m_xStep = 0;
				m_yStep = BSIZE-7;
		}
		break;
	// 스페이스바 키로 공의 점프 구현
	case VK_SPACE:
		if (m_Where >= 0 && m_Where <= 7 && m_yStep != BSIZE-7)
		{	
			//보드속도에 영향을 받지않게
			m_xStep = 0;
			//점프 높이
			m_Ball.y -= 160;
			//낙하 속도
			m_yStep = BSIZE - 7;
		}
			
	}


	CView::OnKeyDown(nChar, nRepCnt, nFlags);
}


void CMy201904026ballgameView::OnTimer(UINT_PTR nIDEvent)
{
	//이동관련함수
	Move();
	Invalidate();

	CView::OnTimer(nIDEvent);
}


void CMy201904026ballgameView::OnSize(UINT nType, int cx, int cy)
{
	// 좌우 끝과 골인지점 크기 설정
	CView::OnSize(nType, cx, cy);
	m_WinRight = cx;
	m_WinBottom = cy;
	m_Goal.left = cx / 2 - 80;
	m_Goal.top = cy - 2;
	m_Goal.right = cx / 2 + 50;
	m_Goal.bottom = cy;
}


void CMy201904026ballgameView::Move()
{
	int i, result;
	// 움직였을때 공의 위치이동
	m_Ball.x = m_Ball.x + m_xStep;
	m_Ball.y = m_Ball.y + m_yStep;
	//보드의 속도설정과 좌우경계지점확인
	for (i = 0; i < 8; i++)
	{
		m_Board[i].m_xPos = m_Board[i].m_xPos + m_Board[i].m_speed * m_Board[i].m_direction;
		if (m_Board[i].m_xPos - m_Board[i].m_size < 0 ||
			m_Board[i].m_xPos + m_Board[i].m_size > m_WinRight)
		{
			if (m_Where == i)
				m_Ball.x = m_Ball.x - m_xStep;
			m_Board[i].m_xPos = m_Board[i].m_xPos - m_Board[i].m_speed * m_Board[i].m_direction;
			m_Board[i].m_direction *= -1;
		}
		//공이 보드위에있는지 확인
		if (m_Board[i].m_xPos - m_Board[i].m_size <= m_Ball.x &&
			m_Ball.x <= m_Board[i].m_xPos + m_Board[i].m_size && 
			m_Board[i].m_yPos == m_Ball.y + BSIZE -2)
		{
			m_Where = i;
			m_xStep = m_Board[m_Where].m_speed * m_Board[m_Where].m_direction;
			m_yStep = 0;
		}
	}
	//성공여부
	result = FinishTest();
	if (result == 1)
		AfxMessageBox(_T("성공!!!"));
	else if (result == -1)
		AfxMessageBox(_T("실패 T.T 다시한번 도전하세요!"));
}

int CMy201904026ballgameView::FinishTest()
{
	//공이 목표지점에 떨어졌을 때
	if (m_Goal.left <= m_Ball.x && m_Ball.x <= m_Goal.right && m_Ball.y - BSIZE > m_WinBottom - 3)
	{
		KillTimer(0);
		return 1;
	}
	//공이 목표지점이 아닌곳에 떨어졌을 때
	if (m_Ball.y - BSIZE > m_WinBottom)
	{
		KillTimer(0);
		return -1;
	}
	//아직 게임이 끝나지않음
	return 0;
}
